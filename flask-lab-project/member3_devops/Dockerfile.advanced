# Advanced Dockerfile Examples - Member 3 (DevOps Engineer)
# This file contains multiple Dockerfile variations for different scenarios

# ============================================
# OPTION 1: Multi-Stage Build (RECOMMENDED)
# ============================================
# Use multi-stage builds to create smaller, more secure images

FROM python:3.11-slim AS builder

# Set working directory
WORKDIR /app

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements
COPY requirements.txt .

# Install Python dependencies
RUN pip install --no-cache-dir --user -r requirements.txt

# Final stage
FROM python:3.11-slim

# Create non-root user for security
RUN useradd -m -u 1000 appuser && \
    mkdir -p /app && \
    chown -R appuser:appuser /app

WORKDIR /app

# Copy Python dependencies from builder
COPY --from=builder /root/.local /home/appuser/.local

# Copy application code
COPY --chown=appuser:appuser . .

# Set environment variables
ENV PATH=/home/appuser/.local/bin:$PATH \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    FLASK_APP=app.py \
    PORT=5000

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD python -c "import requests; requests.get('http://localhost:5000/health', timeout=2)" || exit 1

# Run application
CMD ["gunicorn", "--bind", "0.0.0.0:5000", "--workers", "4", "--threads", "2", "--timeout", "60", "app:app"]


# ============================================
# OPTION 2: Production-Ready with Nginx
# ============================================
# Use this for production deployments with reverse proxy

# FROM nginx:alpine AS nginx
# COPY nginx.conf /etc/nginx/nginx.conf

# FROM python:3.11-slim
# ... rest of Dockerfile
# Add nginx configuration


# ============================================
# OPTION 3: Development Dockerfile
# ============================================
# Use for local development with hot-reload

# FROM python:3.11-slim
# 
# WORKDIR /app
# 
# # Install dependencies
# COPY requirements.txt .
# RUN pip install --no-cache-dir -r requirements.txt && \
#     pip install --no-cache-dir flask-debugtoolbar watchdog
# 
# # Copy application
# COPY . .
# 
# # Set development environment
# ENV FLASK_DEBUG=1 \
#     FLASK_ENV=development
# 
# EXPOSE 5000
# 
# # Use flask run for hot-reload
# CMD ["python", "-m", "flask", "run", "--host=0.0.0.0", "--reload"]


# ============================================
# OPTION 4: Alpine-based (Smaller Size)
# ============================================
# Use Alpine for minimal image size

# FROM python:3.11-alpine
# 
# WORKDIR /app
# 
# # Install build dependencies for Alpine
# RUN apk add --no-cache gcc musl-dev linux-headers
# 
# COPY requirements.txt .
# RUN pip install --no-cache-dir -r requirements.txt
# 
# # Remove build dependencies
# RUN apk del gcc musl-dev linux-headers
# 
# COPY . .
# 
# ENV PYTHONUNBUFFERED=1
# 
# EXPOSE 5000
# 
# CMD ["gunicorn", "--bind", "0.0.0.0:5000", "app:app"]


# ============================================
# OPTION 5: With Monitoring
# ============================================
# Include monitoring tools

# FROM python:3.11-slim
# 
# WORKDIR /app
# 
# # Install system dependencies
# RUN apt-get update && apt-get install -y --no-install-recommends \
#     curl \
#     && rm -rf /var/lib/apt/lists/*
# 
# COPY requirements.txt .
# RUN pip install --no-cache-dir -r requirements.txt && \
#     pip install --no-cache-dir prometheus-flask-exporter
# 
# COPY . .
# 
# # Expose application and metrics port
# EXPOSE 5000 9090
# 
# CMD ["gunicorn", "--bind", "0.0.0.0:5000", "app:app"]


# ============================================
# Security Best Practices
# ============================================
# 
# 1. Use specific version tags (not 'latest')
# 2. Run as non-root user
# 3. Use multi-stage builds
# 4. Minimize layers
# 5. Don't include secrets in image
# 6. Use .dockerignore
# 7. Scan for vulnerabilities
# 8. Keep base images updated


# ============================================
# Build Commands
# ============================================
#
# Build basic image:
# docker build -t flask-lab-project:latest .
#
# Build with specific stage:
# docker build --target builder -t flask-lab-project:builder .
#
# Build with build arguments:
# docker build --build-arg PORT=8080 -t flask-lab-project:latest .
#
# Build for different platforms:
# docker buildx build --platform linux/amd64,linux/arm64 -t flask-lab-project:latest .


# ============================================
# Image Optimization Tips
# ============================================
#
# Check image size:
# docker images flask-lab-project
#
# Inspect image layers:
# docker history flask-lab-project:latest
#
# Analyze image:
# docker scout quickview flask-lab-project:latest
#
# Remove unused images:
# docker image prune -a
