name: Advanced CI/CD Pipeline

# Member 3 - DevOps Engineer
# This file contains advanced CI/CD pipeline configurations

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Manual trigger
  schedule:
    - cron: '0 0 * * 0'  # Weekly on Sunday

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  DOCKER_IMAGE: flask-lab-project

jobs:
  # ============================================
  # Code Quality & Linting
  # ============================================
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install linting tools
      working-directory: ./main
      run: |
        pip install flake8 pylint black isort mypy
    
    - name: Run flake8
      working-directory: ./main
      run: |
        flake8 app.py tests/ --max-line-length=100 --ignore=E203,W503
      continue-on-error: true
    
    - name: Run pylint
      working-directory: ./main
      run: |
        pylint app.py --disable=C0111,C0103
      continue-on-error: true
    
    - name: Check code formatting with black
      working-directory: ./main
      run: |
        black --check app.py tests/
      continue-on-error: true
    
    - name: Check import sorting with isort
      working-directory: ./main
      run: |
        isort --check-only app.py tests/
      continue-on-error: true

  # ============================================
  # Security Scanning
  # ============================================
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: './main'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true
    
    - name: Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
      continue-on-error: true

  # ============================================
  # Unit Tests with Coverage
  # ============================================
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      working-directory: ./main
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-xdist  # For parallel testing
    
    - name: Run tests in parallel
      working-directory: ./main
      run: |
        pytest tests/ -v -n auto --cov=. --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./main/coverage.xml
        flags: unittests
        name: codecov-umbrella
      continue-on-error: true
    
    - name: Generate HTML coverage report
      working-directory: ./main
      run: |
        pytest tests/ --cov=. --cov-report=html
    
    - name: Upload coverage HTML
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: main/htmlcov/
        retention-days: 7

  # ============================================
  # Docker Build & Test
  # ============================================
  docker-build:
    name: Build and Test Docker Image
    runs-on: ubuntu-latest
    needs: [test, code-quality]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    
    - name: Build Docker image
      working-directory: ./main
      run: |
        docker buildx build \
          --cache-from=type=local,src=/tmp/.buildx-cache \
          --cache-to=type=local,dest=/tmp/.buildx-cache-new \
          --load \
          -t ${{ env.DOCKER_IMAGE }}:${{ github.sha }} \
          -t ${{ env.DOCKER_IMAGE }}:latest \
          .
    
    - name: Test Docker image
      run: |
        docker run -d -p 5000:5000 --name test-container ${{ env.DOCKER_IMAGE }}:latest
        sleep 15
        curl -f http://localhost:5000/health || exit 1
        docker logs test-container
        docker stop test-container
        docker rm test-container
    
    - name: Scan Docker image for vulnerabilities
      run: |
        docker run --rm \
          -v /var/run/docker.sock:/var/run/docker.sock \
          aquasec/trivy image \
          --severity HIGH,CRITICAL \
          ${{ env.DOCKER_IMAGE }}:latest
      continue-on-error: true
    
    - name: Save Docker image
      run: |
        docker save ${{ env.DOCKER_IMAGE }}:latest | gzip > flask-lab-project.tar.gz
    
    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: flask-lab-project.tar.gz
        retention-days: 7
    
    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  # ============================================
  # Integration Tests
  # ============================================
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: docker-build
    
    services:
      flask-app:
        image: ${{ env.DOCKER_IMAGE }}:latest
        ports:
          - 5000:5000
        options: >-
          --health-cmd "curl -f http://localhost:5000/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Wait for service
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:5000/health; do sleep 2; done'
    
    - name: Run integration tests
      run: |
        curl -f http://localhost:5000/ || exit 1
        curl -f http://localhost:5000/health || exit 1
        curl -f http://localhost:5000/api/info || exit 1
        
        # Test POST endpoint
        response=$(curl -X POST http://localhost:5000/data \
          -H "Content-Type: application/json" \
          -d '{"name":"Test","message":"Integration test"}' \
          -w "%{http_code}" -o /dev/null -s)
        
        if [ $response -eq 201 ]; then
          echo "POST test passed"
        else
          echo "POST test failed with status: $response"
          exit 1
        fi

  # ============================================
  # Performance Testing
  # ============================================
  performance-test:
    name: Performance & Load Testing
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download Docker image
      uses: actions/download-artifact@v4
      with:
        name: docker-image
    
    - name: Load Docker image
      run: |
        docker load -i flask-lab-project.tar.gz
    
    - name: Start application
      run: |
        docker run -d -p 5000:5000 --name perf-test ${{ env.DOCKER_IMAGE }}:latest
        sleep 10
    
    - name: Install Apache Bench
      run: |
        sudo apt-get update
        sudo apt-get install -y apache2-utils
    
    - name: Run load test
      run: |
        ab -n 1000 -c 10 http://localhost:5000/ || true
        ab -n 1000 -c 10 http://localhost:5000/health || true
    
    - name: Stop container
      run: |
        docker stop perf-test
        docker rm perf-test

  # ============================================
  # Docker Hub Push
  # ============================================
  docker-push:
    name: Push to Docker Hub
    runs-on: ubuntu-latest
    needs: [docker-build, integration-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: ./main
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:buildcache,mode=max

  # ============================================
  # Deploy to Cloud (Example)
  # ============================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: docker-push
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.example.com
    
    steps:
    - name: Deploy notification
      run: |
        echo "Deploying to staging environment"
        # Add your deployment commands here
        # Examples:
        # - kubectl apply -f k8s/staging/
        # - aws ecs update-service
        # - heroku container:release web

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: docker-push
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://app.example.com
    
    steps:
    - name: Deploy notification
      run: |
        echo "Deploying to production environment"
        # Add your production deployment commands

  # ============================================
  # Notification & Reporting
  # ============================================
  notification:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [test, docker-build, integration-test]
    if: always()
    
    steps:
    - name: Pipeline Summary
      run: |
        echo "## 🚀 Pipeline Execution Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Tests**: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Docker Build**: ${{ needs.docker-build.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Integration Tests**: ${{ needs.integration-test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ Pipeline completed!" >> $GITHUB_STEP_SUMMARY
    
    - name: Send Slack notification
      if: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
          -H 'Content-Type: application/json' \
          -d '{"text":"Pipeline completed: ${{ job.status }}"}'
      continue-on-error: true

# ============================================
# Additional Workflow Configurations
# ============================================

# To enable:
# 1. Add secrets in GitHub repository settings
# 2. Uncomment deployment sections
# 3. Configure cloud provider credentials
# 4. Set up Slack webhook for notifications
# 5. Enable Codecov integration
